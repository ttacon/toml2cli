package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"os"

	"golang.org/x/tools/imports"
)

// abiosoftIShellGenerator generates the `abiosoft/ishell` boilerplate from the
// given CLI `MetaInfo` and writes it to the given `outFile`.
func abiosoftIShellGenerator(outFile string, m *MetaInfo) error {
	buf := bytes.NewBuffer(nil)

	// Generator general info first.
	buf.WriteString("shell := ishell.New()\n")
	if historyPath, ok := m.General["historyPath"]; ok {
		if _, err := buf.WriteString(
			fmt.Sprintf("shell.SetHomeHistoryPath(%q)\n", historyPath),
		); err != nil {
			return err
		}
	}

	if banner, ok := m.General["banner"]; ok {
		if _, err := buf.WriteString(
			fmt.Sprintf("shell.Println(%q)\n", banner),
		); err != nil {
			return err
		}
	}

	if err := abiosoftIShellAddCommands(buf, m); err != nil {
		return err
	}

	buf.WriteString("shell.Run()\n")

	fileBuf := bytes.NewBufferString(fmt.Sprintf(`
package main

// DO NOT MODIFY: generated by github.com/ttacon/toml2cli
// If you need to make changes, update the toml config and then regenerate
// this file.

func main() {
%s
}
`, buf.String()))

	processed, err := imports.Process("", fileBuf.Bytes(), options)
	if err != nil {
		return err
	}

	if len(outFile) == 0 {
		// Purge to stdout
		fmt.Println(string(processed))
		return nil
	}

	return ioutil.WriteFile(outFile, processed, os.ModePerm)
}

// abiosoftIShellCommandStrFields is a mapping of the fields to generate and if
// they need to be quoted strings or not (strings in the source code or
// identifiers).
var abiosoftIShellCommandStrFields = map[string]StrOutput{
	"name":        {"Name", true},
	"description": {"Help", true},
	"func":        {"Func", false},
}

// abiosoftIShellAddCommands generates the individual shell commands
// structures and writes them to the given buffer.
func abiosoftIShellAddCommands(buf *bytes.Buffer, m *MetaInfo) error {
	// Time to generate some commands!
	for _, command := range m.Commands {
		if _, err := buf.WriteString("shell.AddCommand(&ishell.Cmd{\n"); err != nil {
			return err
		}

		for key, field := range abiosoftIShellCommandStrFields {
			if value, ok := strFromMap(key, command); ok {
				formatString := "%s: %s,\n"
				if field.quoted {
					formatString = "%s: %q,\n"
				}
				if _, err := buf.WriteString(
					fmt.Sprintf(formatString, field.field, value),
				); err != nil {
					return err
				}
			}
		}
		if _, err := buf.WriteString("})\n"); err != nil {
			return err
		}
	}

	return nil
}
